====================================================================================================
***************************************Automation Testing*******************************************
====================================================================================================
Automation Testing: testing application feature using automation tool & executing test script
			--> preferably regression tests & Smoke tests are automated 
			--> automation of regression tests is carried when-
				a. Build becomes stable (with minimal defects)
				b. New feature is added on the top of existing stable build
				
Why Automation testing is required?
	**Limitations of manual testing:
			1. more human efforts are required
			2. regression testing becomes time consuming
			3. test cycle execution time increases
			4. compatibility testing (system & browser) becomes difficult
			
	**Advantages of automation testing:
			1. less human efforts
			2. regression becomes less time consuming
			3. reduces project duration
			4. reduces cost of project
			5. reusable scripts 
			6. compatibility testing (System compatibility & cross-browsing ) becomes easy & fast
			7. more reliable & efficient (less errors & fast)

Automation Tools:
			1. Selenium (for web-based application)** 			-open source
			2. Sahi(for web-based application) 					-open source
			3. Serenity(for web-based application) 				-open source
			4. Appium (for mobile application)**				-open source
			5. Selendroid (for mobile application) 				-open source
			6. Robot Framework **								-open source
			7. SahiPro(for web-based & mobile application) 		-License
			6. QTP (for web-based application) 					-License
			7. Rhenorex (for web-based application)				-License

-------------------------------------------------------------------------------------------------------
Automation Testing using Selenium:

	**Selenium- open source automation tool for web-based applications
		Versions of Selenium:
			1. Selenium IDE --> only runs on Firefox
							--> compatibility testing not possible
							--> only supports JAVA
			
			2. Selenium-RC	--> only supports JAVA
							--> compatibility testing is possible
							
			3. Selenium Webdriver** --> multi-language support (JAVA, Groovy,C++,Python, Perl, PHP, Rubby etc.)
									--> compatibility testing is possible (cross-browsing )
								  
			4. Selenium-grid --> supports cross platform testing parallel on (Windows, Linux, macOS etc.)
								 on multiple browsers
								 
		Additional automation tools:			
			** Selendriod --> supports only android applications
			
			** Appium --> supports andriod & iOS mobile applications

-------------------------------------------------------------------------------------------------------
Software required for Selenium:
		1. Java JDK latest version (say JDK15 from oracle website)
		2. Selenium  Remote WebDriver "selenium-java-3.141.59" (.zip) file (https://www.selenium.dev/downloads/)
		3. Eclipse IDE (latest)
		4. latest browser specific driver .jar file (Platforms Supported by Selenium)	

Create project-->Right Click on project --> Build path--> configure build path--> Libraries--> Add External jar		
			
-------------------------------------------------------------------------------------------------------
Selenium WebDriver: it is collection of open source APIs to automate web-based applications

		Architecture of Selenium-WebDriver:
		
			"SearchContext(I)" <--Extends--  "WebDriver(I)" <--Implements- A. RemoteWebDriver(C) :  1. FirefoxDriver
			a. findElement			a. get()										  	 			2. ChromeDriver
			b. findElements			b. getCurrentUrl()								  	 			3. IEDriver
									c. getTitle()									   	 			4. EdgeDriver
									d. Close()										  	 			5. SafariDriver
									e. Quit()										  	 			6. OperaDriver
									f. Manage()					 			B. ScriptExecutors	   : JavaScriptExecutor
									g. Navigate()				 			C. ScreenShots	 	   : TakeScreenshots
									h. Maximize()
									i. setSize()
									j. setPosition()
									k. getWindowHandle()
									l. getWindowHandles() etc.

									

